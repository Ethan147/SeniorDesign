<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Lab03.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Lab03.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Sun Apr 20 20:13:35 2014
<BR><P>
<H3>Maximum Stack Usage =        272 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
PingProcessTime &rArr; OS_DisplayMessage &rArr; ST7735_Message &rArr; ST7735_DrawString &rArr; ST7735_DrawChar &rArr; setAddrWindow
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3]">Reset_Handler</a>
 <LI><a href="#[e2]">StartOS</a>
 <LI><a href="#[b]">PendSV_Handler</a>
 <LI><a href="#[d4]">DisableInterrupts</a>
 <LI><a href="#[d5]">EnableInterrupts</a>
 <LI><a href="#[ca]">StartCritical</a>
 <LI><a href="#[cb]">EndCritical</a>
 <LI><a href="#[1ab]">WaitForInterrupt</a>
 <LI><a href="#[167]">__user_initial_stackheap</a>
 <LI><a href="#[98]">cr4_fft_64_stm32</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[35]">CAN1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">CAN1_Handler</a><BR>
 <LI><a href="#[12c]">longToString</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12c]">longToString</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ADC0Seq0_Handler</a> from adc.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1c]">ADC0Seq1_Handler</a> from adc.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1d]">ADC0Seq2_Handler</a> from adc.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1e]">ADC0Seq3_Handler</a> from adc.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3d]">ADC1Seq0_Handler</a> from adc.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3e]">ADC1Seq1_Handler</a> from adc.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3f]">ADC1Seq2_Handler</a> from adc.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[40]">ADC1Seq3_Handler</a> from adc.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[a6]">ButtonWork</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[a8]">ButtonWork2</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[34]">CAN0_Handler</a> from can0.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[35]">CAN1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[36]">CAN2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[b5]">CAN_Rx</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[b8]">CAN_Tx</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[26]">Comp0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[27]">Comp1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[28]">Comp2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[9b]">Consumer</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[d9]">DecrementSleep</a> from os.o(.text) referenced from os.o(.text)
 <LI><a href="#[37]">Ethernet_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[42]">ExtBus_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5f]">FPU_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[67]">Fan0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2a]">FlashCtl_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[d]">GPIOPortA_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[e]">GPIOPortB_Handler</a> from ping.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">GPIOPortC_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[10]">GPIOPortD_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[11]">GPIOPortE_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2b]">GPIOPortF_Handler</a> from gpio.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2c]">GPIOPortG_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2d]">GPIOPortH_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[43]">GPIOPortJ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[44]">GPIOPortK_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[45]">GPIOPortL_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[64]">GPIOPortM_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[65]">GPIOPortN_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[69]">GPIOPortP1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6a]">GPIOPortP2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6b]">GPIOPortP3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6c]">GPIOPortP4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6d]">GPIOPortP5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6e]">GPIOPortP6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6f]">GPIOPortP7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[68]">GPIOPortP_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[71]">GPIOPortQ1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[72]">GPIOPortQ2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[73]">GPIOPortQ3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[74]">GPIOPortQ4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[75]">GPIOPortQ5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[76]">GPIOPortQ6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[77]">GPIOPortQ7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[70]">GPIOPortQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[78]">GPIOPortR_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[79]">GPIOPortS_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[38]">Hibernate_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[15]">I2C0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[32]">I2C1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4d]">I2C2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4e]">I2C3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[62]">I2C4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[63]">I2C5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[41]">I2S0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[83]">IntDefaultHandler</a> from interrupt.o(.text) referenced from interrupt.o(.text)
 <LI><a href="#[61]">LPC0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[e1]">NoCrash</a> from os.o(.text) referenced from os.o(.text)
 <LI><a href="#[81]">OS_Display</a> from os_display.o(.text) referenced from os.o(.text)
 <LI><a href="#[82]">OS_ProcessInterpreter</a> from os_interpreter.o(.text) referenced from os.o(.text)
 <LI><a href="#[af]">Oscilloscope</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[60]">PECI0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[15c]">PING_Signal</a> from ping.o(.text) referenced from ping.o(.text)
 <LI><a href="#[7f]">PING_Start</a> from ping.o(.text) referenced from main.o(.text)
 <LI><a href="#[16]">PWM0Fault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[17]">PWM0Generator0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[18]">PWM0Generator1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[19]">PWM0Generator2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3a]">PWM0Generator3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7e]">PWM1Fault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7a]">PWM1Generator0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7b]">PWM1Generator1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7c]">PWM1Generator2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7d]">PWM1Generator3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from osasm.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[ba]">PingProcessTime</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[99]">Producer</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[1a]">Quadrature0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[33]">Quadrature1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[66]">Quadrature2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[80]">RunTimeUpdate</a> from os_time.o(.text) referenced from os.o(.text)
 <LI><a href="#[14]">SSI0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2f]">SSI1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[46]">SSI2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[47]">SSI3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[29]">SysCtl_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from os.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[20]">Timer0A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[21]">Timer0B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[22]">Timer1A_Handler</a> from os.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[23]">Timer1B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[24]">Timer2A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[25]">Timer2B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[30]">Timer3A_Handler</a> from timer3.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[31]">Timer3B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4f]">Timer4A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[50]">Timer4B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[51]">Timer5A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[52]">Timer5B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[12]">UART0_Handler</a> from uart.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[13]">UART1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2e]">UART2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[48]">UART3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[49]">UART4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4a]">UART5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4b]">UART6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4c]">UART7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[39]">USB0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1f]">WDT_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[53]">WideTimer0A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[54]">WideTimer0B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[55]">WideTimer1A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[56]">WideTimer1B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[57]">WideTimer2A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[58]">WideTimer2B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[59]">WideTimer3A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5a]">WideTimer3B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5b]">WideTimer4A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5c]">WideTimer4B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5d]">WideTimer5A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5e]">WideTimer5B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[85]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[84]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[3c]">uDMA_Error</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3b]">uDMA_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Comp0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Comp1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Comp2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>Ethernet_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ExtBus_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>FPU_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>Fan0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>FlashCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIOPortA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GPIOPortC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIOPortD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPIOPortE_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPIOPortG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPIOPortH_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>GPIOPortJ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>GPIOPortK_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>GPIOPortL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIOPortM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIOPortN_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIOPortP1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIOPortP2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIOPortP3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIOPortP4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIOPortP5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIOPortP6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIOPortP7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIOPortP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIOPortQ1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIOPortQ2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPIOPortQ3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>GPIOPortQ4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>GPIOPortQ5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>GPIOPortQ6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>GPIOPortQ7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIOPortQ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GPIOPortR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>GPIOPortS_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>Hibernate_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2S0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LPC0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>PECI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM0Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM0Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PWM0Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PWM0Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PWM0Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>PWM1Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>PWM1Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>PWM1Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>PWM1Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>PWM1Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>Quadrature0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>Quadrature1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>Quadrature2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SSI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SSI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SSI2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SSI3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SysCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Timer0A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Timer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Timer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Timer2A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Timer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>Timer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>Timer4A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>Timer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Timer5A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>Timer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USB0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>WideTimer0A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>WideTimer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>WideTimer1A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>WideTimer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WideTimer2A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>WideTimer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>WideTimer3A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>WideTimer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>WideTimer4A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>WideTimer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>WideTimer5A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>WideTimer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>uDMA_Error</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>uDMA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[87]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[89]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[185]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[186]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[187]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[188]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[189]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[8a]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[161]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[18a]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[8f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[18b]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[18c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[18d]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[18e]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[18f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[190]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[191]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[192]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[193]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[194]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[195]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[196]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[197]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[198]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[199]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[19a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[19b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[19c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[19d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[19e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[94]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[19f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1a0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1a1]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1a2]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1a3]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1a4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[88]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1a5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[8c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1a6]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[90]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; OS_Init &rArr; OS_Display_Init &rArr; ST7735_ResetMessage &rArr; ST7735_DrawString &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1a7]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[168]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[93]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1a8]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[95]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b3]"></a>square_rt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oscilloscope
</UL>

<P><STRONG><a name="[97]"></a>FFT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cr4_fft_64_stm32
</UL>

<P><STRONG><a name="[9e]"></a>filter</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = filter
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
</UL>

<P><STRONG><a name="[99]"></a>Producer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Producer &rArr; OS_Fifo_Put &rArr; OS_Signal &rArr; unlinkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Fifo_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>Consumer</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Consumer &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Fifo_Get
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Collect
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>Display</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MailBox_Recv
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayMessage
</UL>

<P><STRONG><a name="[a6]"></a>ButtonWork</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ButtonWork &rArr; OS_DisplayMessage &rArr; ST7735_Message &rArr; ST7735_DrawString &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>ButtonWork2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ButtonWork2 &rArr; OS_PlotClear &rArr; ST7735_PlotClear &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotClear
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>SW1Push</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
</UL>

<P><STRONG><a name="[ac]"></a>SW2Push</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
</UL>

<P><STRONG><a name="[ae]"></a>PlotMacqInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlotMacqClear
</UL>

<P><STRONG><a name="[1a9]"></a>PlotMacqAdd</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>PlotMacqClear</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlotMacqInit
</UL>

<P><STRONG><a name="[af]"></a>Oscilloscope</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Oscilloscope &rArr; OS_PlotClear &rArr; ST7735_PlotClear &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotPoint
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotNext
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotClear
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotBar
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MailBox_Recv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;square_rt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>CAN_Rx</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_GetMailNonBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>CAN_Tx</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CAN_Tx &rArr; CAN0_SendData &rArr; CAN0_Setup_Message_Object &rArr; CANMessageSet &rArr; CANDataRegWrite &rArr; CANRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>PortF_Init</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>PingProcessTime</STRONG> (Thumb, 574 bytes, Stack size 72 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = PingProcessTime &rArr; OS_DisplayMessage &rArr; ST7735_Message &rArr; ST7735_DrawString &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayMessage
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>PWM_Work</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Left_Duty
</UL>

<P><STRONG><a name="[91]"></a>main</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = main &rArr; OS_Init &rArr; OS_Display_Init &rArr; ST7735_ResetMessage &rArr; ST7735_DrawString &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PING_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MailBox_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Launch
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Fifo_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddPeriodicThread
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Open
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c9]"></a>linkTCB</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = linkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecrementSleep
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
</UL>

<P><STRONG><a name="[cc]"></a>unlinkTCB</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = unlinkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
</UL>

<P><STRONG><a name="[1aa]"></a>OS_Id</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>SetInitialStack</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetInitialStack
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
</UL>

<P><STRONG><a name="[ab]"></a>OS_AddThread</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_AddThread &rArr; linkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInitialStack
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PING_Start
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Launch
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW2Push
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1Push
</UL>

<P><STRONG><a name="[ce]"></a>OS_AddSW1Task</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1_Init
</UL>

<P><STRONG><a name="[d0]"></a>OS_AddSWTask</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Init
</UL>

<P><STRONG><a name="[22]"></a>Timer1A_Handler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer1A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>OS_AddPeriodicThread</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_AddPeriodicThread
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Launch
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>OS_Suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayInterpreter
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayRunTime
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Rx
</UL>

<P><STRONG><a name="[a7]"></a>OS_Kill</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OS_Kill &rArr; unlinkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlinkTCB
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PING_Signal
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingProcessTime
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonWork2
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonWork
</UL>

<P><STRONG><a name="[d2]"></a>OS_InitSemaphore</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_InitSemaphore
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Interpreter_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Display_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MailBox_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Fifo_Init
</UL>

<P><STRONG><a name="[d3]"></a>OS_Wait</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OS_Wait &rArr; unlinkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlinkTCB
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTCB
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Fifo_Get
</UL>

<P><STRONG><a name="[d6]"></a>OS_bWait</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OS_bWait &rArr; unlinkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlinkTCB
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTCB
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_RX_FifoSize
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_InString
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_OutUHex
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_InUHex
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_OutUDec
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_InUDec
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_OutString
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_OutChar
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_InChar
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_SendHelp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotdBfs
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayInterpreter
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayUnknownCMD_Flash
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayRunTime
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayClearLine
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayResetMessage
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MailBox_Send
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ProcessInterpreter
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotPoint
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotNext
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotClear
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotBar
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MailBox_Recv
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayMessage
</UL>

<P><STRONG><a name="[d7]"></a>OS_Signal</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_Signal &rArr; unlinkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlinkTCB
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Fifo_Put
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Fifo_Get
</UL>

<P><STRONG><a name="[d8]"></a>OS_bSignal</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_bSignal &rArr; unlinkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlinkTCB
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_RX_FifoSize
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_InString
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_OutUHex
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_InUHex
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_OutUDec
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_InUDec
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_OutString
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_OutChar
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_InChar
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_SendHelp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotdBfs
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayInterpreter
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayUnknownCMD_Flash
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayRunTime
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayClearLine
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayResetMessage
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MailBox_Send
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ProcessInterpreter
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotPoint
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotNext
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotClear
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotBar
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MailBox_Recv
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayMessage
</UL>

<P><STRONG><a name="[b2]"></a>OS_Sleep</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OS_Sleep &rArr; unlinkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlinkTCB
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Display
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Work
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oscilloscope
</UL>

<P><STRONG><a name="[d9]"></a>DecrementSleep</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = DecrementSleep &rArr; linkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>OS_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OS_Init &rArr; OS_Display_Init &rArr; ST7735_ResetMessage &rArr; ST7735_DrawString &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Interpreter_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSystemTime
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitPeriodicTimer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Display_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>NoCrash</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>OS_Launch</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_Launch &rArr; OS_AddThread &rArr; linkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_InitInt
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOS
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddPeriodicThread
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>SysTick_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
</UL>

<P><STRONG><a name="[e0]"></a>SysTick_InitInt</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SysTick_InitInt
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Launch
</UL>

<P><STRONG><a name="[e4]"></a>SysTick_Wait</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Wait1ms
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Wait10ms
</UL>

<P><STRONG><a name="[e3]"></a>SysTick_Wait10ms</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysTick_Wait10ms &rArr; SysTick_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_UnknownCMD_Flash
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_ResetMessage
</UL>

<P><STRONG><a name="[e5]"></a>SysTick_Wait1ms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysTick_Wait1ms &rArr; SysTick_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortF_Handler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>

<P><STRONG><a name="[15d]"></a>OS_Time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortB_Handler
</UL>

<P><STRONG><a name="[15e]"></a>OS_TimeDifference</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortB_Handler
</UL>

<P><STRONG><a name="[e6]"></a>OS_ClearMsTime</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>

<P><STRONG><a name="[e7]"></a>OS_MsTime</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>

<P><STRONG><a name="[e8]"></a>OS_ClearPeriodicTime</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>

<P><STRONG><a name="[e9]"></a>OS_ReadPeriodicTime</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>

<P><STRONG><a name="[80]"></a>RunTimeUpdate</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_time.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>OS_InitSystemTime</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_InitSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[dc]"></a>OS_InitPeriodicTimer</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_InitPeriodicTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[ea]"></a>OSFifo_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSFifo_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Fifo_Init
</UL>

<P><STRONG><a name="[eb]"></a>OSFifo_Put</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Fifo_Put
</UL>

<P><STRONG><a name="[ec]"></a>OSFifo_Get</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, os_fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Fifo_Get
</UL>

<P><STRONG><a name="[ee]"></a>OSFifo_Size</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, os_fifo.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Fifo_Size
</UL>

<P><STRONG><a name="[c2]"></a>OS_Fifo_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_Fifo_Init &rArr; OS_InitSemaphore
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFifo_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>OS_Fifo_Put</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_Fifo_Put &rArr; OS_Signal &rArr; unlinkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFifo_Put
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Producer
</UL>

<P><STRONG><a name="[9d]"></a>OS_Fifo_Get</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_Fifo_Get &rArr; OS_Signal &rArr; unlinkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFifo_Get
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
</UL>

<P><STRONG><a name="[ed]"></a>OS_Fifo_Size</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, os_fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFifo_Size
</UL>

<P><STRONG><a name="[c1]"></a>OS_MailBox_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os_mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_MailBox_Init &rArr; OS_InitSemaphore
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>OS_MailBox_Send</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_mailbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>

<P><STRONG><a name="[a4]"></a>OS_MailBox_Recv</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_MailBox_Recv &rArr; OS_bSignal &rArr; unlinkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oscilloscope
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>

<P><STRONG><a name="[dd]"></a>OS_Display_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_Display_Init &rArr; ST7735_ResetMessage &rArr; ST7735_DrawString &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_ResetMessage
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[f2]"></a>OS_DisplayResetMessage</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_ResetMessage
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>

<P><STRONG><a name="[f3]"></a>OS_DisplayClearLine</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, os_display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_ClearLine
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>

<P><STRONG><a name="[a5]"></a>OS_DisplayMessage</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, os_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = OS_DisplayMessage &rArr; ST7735_Message &rArr; ST7735_DrawString &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Message
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingProcessTime
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonWork
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>

<P><STRONG><a name="[f6]"></a>OS_DisplayRunTime</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = OS_DisplayRunTime &rArr; ST7735_DisplayRunTime &rArr; ST7735_DrawString &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_NoDisplayRunTime
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DisplayRunTime
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Display
</UL>

<P><STRONG><a name="[f9]"></a>OS_DisplayUnknownCMD_Flash</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OS_DisplayUnknownCMD_Flash &rArr; ST7735_UnknownCMD_Flash &rArr; ST7735_ClearLine &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_UnknownCMD_Flash
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UpdateSystemState
</UL>

<P><STRONG><a name="[fb]"></a>OS_DisplayInterpreter</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, os_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = OS_DisplayInterpreter &rArr; ST7735_Interpreter &rArr; ST7735_DrawString &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Interpreter
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ProcessInterpreter
</UL>

<P><STRONG><a name="[81]"></a>OS_Display</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, os_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = OS_Display &rArr; OS_DisplayRunTime &rArr; ST7735_DisplayRunTime &rArr; ST7735_DrawString &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_SendHelp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayRunTime
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>OS_PlotPoint</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OS_PlotPoint &rArr; ST7735_PlotPoint &rArr; ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PlotPoint
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oscilloscope
</UL>

<P><STRONG><a name="[b4]"></a>OS_PlotBar</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OS_PlotBar &rArr; ST7735_PlotBar &rArr; ST7735_DrawFastVLine &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PlotBar
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oscilloscope
</UL>

<P><STRONG><a name="[100]"></a>OS_PlotdBfs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PlotdBfs
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>

<P><STRONG><a name="[b1]"></a>OS_PlotNext</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_PlotNext &rArr; OS_bSignal &rArr; unlinkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PlotNext
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oscilloscope
</UL>

<P><STRONG><a name="[a9]"></a>OS_PlotClear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, os_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OS_PlotClear &rArr; ST7735_PlotClear &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PlotClear
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oscilloscope
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonWork2
</UL>

<P><STRONG><a name="[de]"></a>OS_Interpreter_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_interpreter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_Interpreter_Init &rArr; UART_Init &rArr; TxFifo_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[105]"></a>OS_UART_InChar</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_interpreter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InChar
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>

<P><STRONG><a name="[107]"></a>OS_UART_OutChar</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_interpreter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>

<P><STRONG><a name="[109]"></a>OS_UART_OutString</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_interpreter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>

<P><STRONG><a name="[10b]"></a>OS_UART_InUDec</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_interpreter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InUDec
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>

<P><STRONG><a name="[10d]"></a>OS_UART_OutUDec</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_interpreter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUDec
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>

<P><STRONG><a name="[10f]"></a>OS_UART_InUHex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_interpreter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InUHex
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>

<P><STRONG><a name="[111]"></a>OS_UART_OutUHex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_interpreter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUHex
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>

<P><STRONG><a name="[113]"></a>OS_UART_InString</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, os_interpreter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InString
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>

<P><STRONG><a name="[115]"></a>OS_UART_RX_FifoSize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_interpreter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_FifoSize
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>

<P><STRONG><a name="[fd]"></a>OS_UART_SendHelp</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_interpreter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_UART_SendHelp &rArr; OS_bSignal &rArr; unlinkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Display
</UL>

<P><STRONG><a name="[117]"></a>OS_UpdateSystemState</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, os_interpreter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OS_UpdateSystemState &rArr; OS_DisplayUnknownCMD_Flash &rArr; ST7735_UnknownCMD_Flash &rArr; ST7735_ClearLine &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayUnknownCMD_Flash
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Interpreter
</UL>

<P><STRONG><a name="[119]"></a>UART_Interpreter</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, os_interpreter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = UART_Interpreter &rArr; OS_UpdateSystemState &rArr; OS_DisplayUnknownCMD_Flash &rArr; ST7735_UnknownCMD_Flash &rArr; ST7735_ClearLine &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_FifoSize
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InChar
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UpdateSystemState
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ProcessInterpreter
</UL>

<P><STRONG><a name="[82]"></a>OS_ProcessInterpreter</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_interpreter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = OS_ProcessInterpreter &rArr; OS_DisplayInterpreter &rArr; ST7735_Interpreter &rArr; ST7735_DrawString &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Interpreter
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayInterpreter
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>StartOS</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, osasm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Launch
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>DisableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[d5]"></a>EnableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Launch
</UL>

<P><STRONG><a name="[ca]"></a>StartCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PING_Signal
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCapture_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFifo_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ReadPeriodicTime
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ClearPeriodicTime
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsTime
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ClearMsTime
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_InitInt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSystemTime
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitPeriodicTimer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlinkTCB
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTCB
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
</UL>

<P><STRONG><a name="[cb]"></a>EndCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PING_Signal
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCapture_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFifo_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ReadPeriodicTime
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ClearPeriodicTime
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsTime
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ClearMsTime
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_InitInt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSystemTime
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitPeriodicTimer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlinkTCB
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTCB
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
</UL>

<P><STRONG><a name="[1ab]"></a>WaitForInterrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[da]"></a>PLL_Init</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, pll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[11f]"></a>ST7735_InitB</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, st7735.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
</UL>

<P><STRONG><a name="[f0]"></a>ST7735_InitR</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ST7735_InitR &rArr; commonInit &rArr; commandList &rArr; SysTick_Wait1ms &rArr; SysTick_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Display_Init
</UL>

<P><STRONG><a name="[122]"></a>ST7735_DrawPixel</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PlotPoint
</UL>

<P><STRONG><a name="[123]"></a>ST7735_DrawFastVLine</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ST7735_DrawFastVLine &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PlotdBfs
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PlotBar
</UL>

<P><STRONG><a name="[124]"></a>ST7735_DrawFastHLine</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ST7735_DrawFastHLine &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Interpreter
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DisplayRunTime
</UL>

<P><STRONG><a name="[125]"></a>ST7735_FillRect</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PlotClear
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_ClearLine
</UL>

<P><STRONG><a name="[126]"></a>ST7735_FillScreen</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ST7735_FillScreen &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_ResetMessage
</UL>

<P><STRONG><a name="[1ac]"></a>ST7735_Color565</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, st7735.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>ST7735_SwapColor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, st7735.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>ST7735_DrawBitmap</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, st7735.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>

<P><STRONG><a name="[128]"></a>ST7735_DrawCharS</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, st7735.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
</UL>

<P><STRONG><a name="[129]"></a>ST7735_DrawChar</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
</UL>

<P><STRONG><a name="[12a]"></a>ST7735_SetRotation</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, st7735.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>

<P><STRONG><a name="[12b]"></a>ST7735_InvertDisplay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, st7735.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>

<P><STRONG><a name="[103]"></a>ST7735_PlotClear</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ST7735_PlotClear &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotClear
</UL>

<P><STRONG><a name="[fe]"></a>ST7735_PlotPoint</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ST7735_PlotPoint &rArr; ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotPoint
</UL>

<P><STRONG><a name="[ff]"></a>ST7735_PlotBar</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ST7735_PlotBar &rArr; ST7735_DrawFastVLine &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawFastVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotBar
</UL>

<P><STRONG><a name="[101]"></a>ST7735_PlotdBfs</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, st7735.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawFastVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotdBfs
</UL>

<P><STRONG><a name="[102]"></a>ST7735_PlotNext</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, st7735.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PlotNext
</UL>

<P><STRONG><a name="[12d]"></a>clearString</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, st7735.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longToString
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Interpreter
</UL>

<P><STRONG><a name="[12c]"></a>longToString</STRONG> (Thumb, 76 bytes, Stack size 28 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + In Cycle
<LI>Call Chain = longToString &rArr;  longToString (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longToString
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longToString
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Message
</UL>

<P><STRONG><a name="[12e]"></a>ST7735_DrawString</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ST7735_DrawString &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_ResetMessage
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Message
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Interpreter
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DisplayRunTime
</UL>

<P><STRONG><a name="[f4]"></a>ST7735_ClearLine</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ST7735_ClearLine &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_UnknownCMD_Flash
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_NoDisplayRunTime
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayClearLine
</UL>

<P><STRONG><a name="[f1]"></a>ST7735_ResetMessage</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ST7735_ResetMessage &rArr; ST7735_DrawString &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Wait10ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayResetMessage
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Display_Init
</UL>

<P><STRONG><a name="[f5]"></a>ST7735_Message</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ST7735_Message &rArr; ST7735_DrawString &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longToString
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayMessage
</UL>

<P><STRONG><a name="[f8]"></a>ST7735_DisplayRunTime</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ST7735_DisplayRunTime &rArr; ST7735_DrawString &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawFastHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayRunTime
</UL>

<P><STRONG><a name="[f7]"></a>ST7735_NoDisplayRunTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ST7735_NoDisplayRunTime &rArr; ST7735_ClearLine &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_ClearLine
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayRunTime
</UL>

<P><STRONG><a name="[fa]"></a>ST7735_UnknownCMD_Flash</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ST7735_UnknownCMD_Flash &rArr; ST7735_ClearLine &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_ClearLine
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Wait10ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayUnknownCMD_Flash
</UL>

<P><STRONG><a name="[fc]"></a>ST7735_Interpreter</STRONG> (Thumb, 76 bytes, Stack size 72 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ST7735_Interpreter &rArr; ST7735_DrawString &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearString
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawFastHLine
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisplayInterpreter
</UL>

<P><STRONG><a name="[131]"></a>RxFifo_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = RxFifo_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[134]"></a>RxFifo_Put</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyHardwareToSoftware
</UL>

<P><STRONG><a name="[139]"></a>RxFifo_Get</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InChar
</UL>

<P><STRONG><a name="[135]"></a>RxFifo_Size</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyHardwareToSoftware
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_FifoSize
</UL>

<P><STRONG><a name="[132]"></a>TxFifo_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = TxFifo_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[13a]"></a>TxFifo_Put</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>

<P><STRONG><a name="[137]"></a>TxFifo_Get</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
</UL>

<P><STRONG><a name="[138]"></a>TxFifo_Size</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
</UL>

<P><STRONG><a name="[104]"></a>UART_Init</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = UART_Init &rArr; TxFifo_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Interpreter_Init
</UL>

<P><STRONG><a name="[106]"></a>UART_InChar</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_InChar
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InUHex
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InUDec
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InString
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Interpreter
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_InChar
</UL>

<P><STRONG><a name="[108]"></a>UART_OutChar</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_OutChar &rArr; copySoftwareToHardware
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Put
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUHex
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUDec
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InUHex
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InUDec
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InString
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Interpreter
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_OutChar
</UL>

<P><STRONG><a name="[12]"></a>UART0_Handler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_Handler &rArr; copySoftwareToHardware
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Size
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyHardwareToSoftware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>UART_OutString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_OutString &rArr; UART_OutChar &rArr; copySoftwareToHardware
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_OutString
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_SendHelp
</UL>

<P><STRONG><a name="[10c]"></a>UART_InUDec</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InChar
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_InUDec
</UL>

<P><STRONG><a name="[10e]"></a>UART_OutUDec</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUDec
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUDec
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_OutUDec
</UL>

<P><STRONG><a name="[110]"></a>UART_InUHex</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InChar
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_InUHex
</UL>

<P><STRONG><a name="[112]"></a>UART_OutUHex</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUHex
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUHex
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_OutUHex
</UL>

<P><STRONG><a name="[114]"></a>UART_InString</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InChar
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_InString
</UL>

<P><STRONG><a name="[116]"></a>UART_RX_FifoSize</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_RX_FifoSize
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Interpreter
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UART_RX_FifoSize
</UL>

<P><STRONG><a name="[13c]"></a>ADC_EnableChannel</STRONG> (Thumb, 822 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableSequence
</UL>

<P><STRONG><a name="[13e]"></a>ADC_EnableModule</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Open
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Collect
</UL>

<P><STRONG><a name="[13b]"></a>ADC_EnableSequence</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_EnableSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Open
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Collect
</UL>

<P><STRONG><a name="[df]"></a>ADC_EnableTimer</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_EnableTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[13f]"></a>ADC_SetSequencer</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_SetSequencer
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Open
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Collect
</UL>

<P><STRONG><a name="[13d]"></a>ADC_Open</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSequencer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableSequence
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableModule
</UL>

<P><STRONG><a name="[1ae]"></a>ADC_In</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>ADC_Collect</STRONG> (Thumb, 518 bytes, Stack size 36 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ADC_Collect &rArr; ADC_SetSequencer
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSequencer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableSequence
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableModule
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
</UL>

<P><STRONG><a name="[1af]"></a>ADC_Status</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>ADC0Seq0_Handler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC0Seq0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC0Seq1_Handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC0Seq1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC0Seq2_Handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC0Seq2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC0Seq3_Handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC0Seq3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC1Seq0_Handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1Seq0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>ADC1Seq1_Handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1Seq1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>ADC1Seq2_Handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1Seq2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>ADC1Seq3_Handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1Seq3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b0]"></a>PortE_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>SW1_Init</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddSW1Task
</UL>

<P><STRONG><a name="[d1]"></a>SW_Init</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddSWTask
</UL>

<P><STRONG><a name="[2b]"></a>GPIOPortF_Handler</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIOPortF_Handler &rArr; SysTick_Wait1ms &rArr; SysTick_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Wait1ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[147]"></a>CANInit</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANInit &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Open
</UL>

<P><STRONG><a name="[148]"></a>CANEnable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANEnable &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Open
</UL>

<P><STRONG><a name="[149]"></a>CANDisable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[14a]"></a>CANBitRateSet</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CANBitRateSet &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Open
</UL>

<P><STRONG><a name="[14b]"></a>CANIntRegister</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
</UL>

<P><STRONG><a name="[14d]"></a>CANIntUnregister</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntUnregister
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
</UL>

<P><STRONG><a name="[14f]"></a>CANIntEnable</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANIntEnable &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Open
</UL>

<P><STRONG><a name="[150]"></a>CANIntDisable</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[151]"></a>CANIntStatus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANIntStatus &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>

<P><STRONG><a name="[152]"></a>CANIntClear</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANIntClear &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>

<P><STRONG><a name="[153]"></a>CANRetrySet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[154]"></a>CANRetryGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[155]"></a>CANStatusGet</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANStatusGet &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>

<P><STRONG><a name="[156]"></a>CANErrCntrGet</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[157]"></a>CANMessageSet</STRONG> (Thumb, 434 bytes, Stack size 64 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CANMessageSet &rArr; CANDataRegWrite &rArr; CANRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDataRegWrite
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Setup_Message_Object
</UL>

<P><STRONG><a name="[158]"></a>CANMessageGet</STRONG> (Thumb, 434 bytes, Stack size 48 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CANMessageGet &rArr; CANDataRegRead &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDataRegRead
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>

<P><STRONG><a name="[159]"></a>CANMessageClear</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[34]"></a>CAN0_Handler</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, can0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CAN0_Handler &rArr; CANMessageGet &rArr; CANDataRegRead &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANStatusGet
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>CAN0_Open</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, can0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CAN0_Open &rArr; CAN0_Setup_Message_Object &rArr; CANMessageSet &rArr; CANDataRegWrite &rArr; CANRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Setup_Message_Object
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntEnable
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitRateSet
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>CAN0_SendData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, can0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CAN0_SendData &rArr; CAN0_Setup_Message_Object &rArr; CANMessageSet &rArr; CANDataRegWrite &rArr; CANRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Setup_Message_Object
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx
</UL>

<P><STRONG><a name="[1b1]"></a>CAN0_CheckMail</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can0.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>CAN0_GetMailNonBlock</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, can0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Rx
</UL>

<P><STRONG><a name="[1b2]"></a>CAN0_GetMail</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, can0.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>Timer3_Init</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, timer3.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>Timer3A_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer3A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14c]"></a>IntRegister</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntRegister
</UL>

<P><STRONG><a name="[14e]"></a>IntUnregister</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntUnregister
</UL>

<P><STRONG><a name="[1b4]"></a>IntPriorityGroupingSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>IntPriorityGroupingGet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>IntPrioritySet</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>IntPriorityGet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>IntEnable</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntRegister
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[142]"></a>IntDisable</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntUnregister
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[1b8]"></a>IntPendSet</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>IntPendClear</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>TimerCapture_Init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = TimerCapture_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PING_Init
</UL>

<P><STRONG><a name="[c4]"></a>PING_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = PING_Init &rArr; TimerCapture_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCapture_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>PING_Signal</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = PING_Signal &rArr; OS_Kill &rArr; unlinkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ping.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>PING_Start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = PING_Start &rArr; OS_AddThread &rArr; linkTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>GPIOPortB_Handler</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOPortB_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TimeDifference
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>Motor_Init</STRONG> (Thumb, 228 bytes, Stack size 12 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Motor_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>Motor_Left_Duty</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Work
</UL>

<P><STRONG><a name="[1ba]"></a>Motor_Right_Duty</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>Motor_Left_Direction</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>Motor_right_Direction</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>cr4_fft_64_stm32</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cr4_fft_64_stm32.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT
</UL>

<P><STRONG><a name="[12f]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DisplayRunTime
</UL>

<P><STRONG><a name="[160]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[8b]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[130]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Interpreter
</UL>

<P><STRONG><a name="[118]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UpdateSystemState
</UL>

<P><STRONG><a name="[1bd]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[165]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[162]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[15f]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[84]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[164]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1c0]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1c3]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[92]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[96]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1c4]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1c6]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[16b]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[a0]"></a>pow</STRONG> (Thumb, 2510 bytes, Stack size 112 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
</UL>

<P><STRONG><a name="[16d]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[173]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[177]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[17d]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingProcessTime
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[179]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingProcessTime
</UL>

<P><STRONG><a name="[17a]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingProcessTime
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
</UL>

<P><STRONG><a name="[17b]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1c7]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingProcessTime
</UL>

<P><STRONG><a name="[1c8]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[1c9]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[17c]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[180]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingProcessTime
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[17e]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[176]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[175]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[17f]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[181]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[172]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[16e]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[183]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[178]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[16c]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[184]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[11b]"></a>writecommand</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, st7735.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InvertDisplay
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetRotation
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[11c]"></a>writedata</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, st7735.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetRotation
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawFastHLine
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawFastVLine
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[11a]"></a>commandList</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = commandList &rArr; SysTick_Wait1ms &rArr; SysTick_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Wait1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[11d]"></a>commonInit</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = commonInit &rArr; commandList &rArr; SysTick_Wait1ms &rArr; SysTick_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Wait1ms
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitB
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[120]"></a>setAddrWindow</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawChar
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawFastHLine
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawFastVLine
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
</UL>

<P><STRONG><a name="[121]"></a>pushColor</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st7735.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pushColor
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawChar
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
</UL>

<P><STRONG><a name="[133]"></a>copyHardwareToSoftware</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = copyHardwareToSoftware
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Size
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[136]"></a>copySoftwareToHardware</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copySoftwareToHardware
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Size
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>

<P><STRONG><a name="[141]"></a>CANIntNumberGet</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntUnregister
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntRegister
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[140]"></a>CANRegRead</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageClear
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANErrCntrGet
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANStatusGet
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRetryGet
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRetrySet
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntStatus
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntDisable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntEnable
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitRateSet
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDisable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDataRegRead
</UL>

<P><STRONG><a name="[145]"></a>CANRegWrite</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CANRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageClear
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANStatusGet
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRetrySet
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntDisable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntEnable
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitRateSet
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDisable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDataRegWrite
</UL>

<P><STRONG><a name="[144]"></a>CANDataRegWrite</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CANDataRegWrite &rArr; CANRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
</UL>

<P><STRONG><a name="[146]"></a>CANDataRegRead</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CANDataRegRead &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
</UL>

<P><STRONG><a name="[15a]"></a>CAN0_Setup_Message_Object</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, can0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CAN0_Setup_Message_Object &rArr; CANMessageSet &rArr; CANDataRegWrite &rArr; CANRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_SendData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Open
</UL>

<P><STRONG><a name="[83]"></a>IntDefaultHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interrupt.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[182]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[174]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
